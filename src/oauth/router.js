// Generated by CoffeeScript 2.7.0
(function() {
  // FILENAME: { ClodForest/src/oauth/router.coffee }
  // OAuth2 router using oidc-provider
  var createProvider, express, issuer, logger, provider, router;

  express = require('express');

  ({createProvider} = require('./oidc-provider'));

  ({logger} = require('../lib/logger'));

  // Create router
  router = express.Router();

  // Create OIDC provider instance
  issuer = process.env.ISSUER_URL || `http://localhost:${process.env.PORT || 8080}`;

  provider = createProvider(issuer);

  // Mount the OIDC provider
  router.use(provider.callback());

  // Custom interaction endpoint for auto-approval
  router.get('/interaction/:uid', async function(req, res) {
    var details, error, ref, result;
    try {
      // Get interaction details
      details = (await provider.interactionDetails(req, res));
      logger.oauth('Interaction requested', {
        uid: req.params.uid,
        client_id: details.params.client_id,
        scope: details.params.scope
      });
      
      // Auto-approve for MCP clients
      if ((ref = details.params.scope) != null ? ref.includes('mcp') : void 0) {
        result = {
          consent: {
            grantId: details.grantId
          }
        };
        logger.oauth('Auto-approving MCP client interaction', {
          uid: req.params.uid,
          client_id: details.params.client_id,
          scope: details.params.scope
        });
        return (await provider.interactionFinished(req, res, result, {
          mergeWithLastSubmission: false
        }));
      } else {
        // For non-MCP clients, return error (we don't have a UI)
        return res.status(400).json({
          error: 'interaction_required',
          error_description: 'This authorization server only supports MCP clients'
        });
      }
    } catch (error1) {
      error = error1;
      logger.oauth('Interaction error', {
        uid: req.params.uid,
        error: error.message,
        stack: error.stack
      });
      return res.status(500).json({
        error: 'server_error',
        error_description: 'Internal server error during interaction'
      });
    }
  });

  module.exports = router;

}).call(this);
