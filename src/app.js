// Generated by CoffeeScript 2.7.0
(function() {
  // FILENAME: { ClodForest/src/app.coffee }
  // Main Express application
  var PORT, app, authMiddleware, cors, express, fs, healthRoutes, logger, mcpHandler, oauthRoutes, path, requestLogger, securityMiddleware, wellKnownRoutes;

  express = require('express');

  cors = require('cors');

  path = require('node:path');

  fs = require('node:fs/promises');

  wellKnownRoutes = require('./routes/wellknown');

  healthRoutes = require('./routes/health');

  oauthRoutes = require('./oauth/router');

  mcpHandler = require('./mcp/server');

  authMiddleware = require('./middleware/auth');

  securityMiddleware = require('./middleware/security');

  ({logger, requestLogger} = require('./lib/logger'));

  PORT = process.env.PORT || 8080;

  module.exports.app = app = express();

  // Security middleware
  app.use(securityMiddleware);

  // CORS configuration
  app.use(cors({
    origin: process.env.CORS_ORIGIN || '*',
    credentials: true
  }));

  // Body parsing middleware
  app.use(express.json({
    limit: '10mb'
  }));

  app.use(express.urlencoded({
    extended: true,
    limit: '10mb'
  }));

  // Request logging middleware
  app.use(requestLogger);

  // Well-known endpoints (RFC 5785)
  app.use('/.well-known', wellKnownRoutes);

  // Health check endpoint
  app.use('/api/health', healthRoutes);

  // OAuth2 endpoints
  app.use('/oauth', oauthRoutes);

  // MCP endpoint (OAuth2 protected)
  app.use('/api/mcp', authMiddleware, mcpHandler);

  // Error handling middleware
  app.use(function(err, req, res, next) {
    logger.error('HTTP Error', {
      error: err.message,
      stack: err.stack,
      status: err.status
    });
    return res.status(err.status || 500).json({
      error: 'Internal Server Error',
      message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
    });
  });

  // 404 handler
  app.use(function(req, res) {
    return res.status(404).json({
      error: 'Not Found',
      message: 'The requested resource was not found'
    });
  });

  // Start server
  app.listen(PORT, function() {
    var startupMessage;
    startupMessage = `ClodForest MCP Server running on port ${PORT}
Environment:         ${process.env.NODE_ENV || 'development'}
OAuth2 endpoints:    /oauth/*
MCP endpoint:        /api/mcp
Well-known endpoints: /.well-known/*`;
    console.log(startupMessage);
    return logger.info('Server started', {
      port: PORT,
      environment: process.env.NODE_ENV || 'development',
      pid: process.pid
    });
  });

}).call(this);
