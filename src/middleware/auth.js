// Generated by CoffeeScript 2.7.0
(function() {
  // FILENAME: { ClodForest/src/middleware/auth.coffee }
  // OAuth2 authentication middleware using oidc-provider
  var authenticate, createProvider, issuer, logger, provider, requireScope;

  ({createProvider} = require('../oauth/oidc-provider'));

  ({logger} = require('../lib/logger'));

  // Create provider instance for token introspection
  issuer = process.env.ISSUER_URL || `http://localhost:${process.env.PORT || 8080}`;

  provider = createProvider(issuer);

  // OAuth2 authentication middleware
  authenticate = async function(req, res, next) {
    var AccessToken, authHeader, error, introspectionReq, ref, token, tokenInstance;
    try {
      // Extract Bearer token from Authorization header
      authHeader = req.headers.authorization;
      if (!(authHeader != null ? authHeader.startsWith('Bearer ') : void 0)) {
        logger.oauth('Missing or invalid Authorization header', {
          authorization: authHeader ? (authHeader != null ? authHeader.substring(0, 20) : void 0) + '...' : void 0,
          method: req.method,
          path: req.path
        });
        return res.status(401).json({
          error: 'invalid_token',
          error_description: 'Bearer token required'
        });
      }
      token = authHeader.substring(7); // Remove 'Bearer ' prefix
      logger.oauth('Authentication attempt', {
        tokenPrefix: token.substring(0, 10) + '...',
        method: req.method,
        path: req.path
      });
      // Use oidc-provider's token introspection
      // Create a mock request for introspection
      introspectionReq = {
        method: 'POST',
        url: '/oauth/introspect',
        headers: {
          'content-type': 'application/x-www-form-urlencoded'
        },
        body: {
          token: token,
          token_type_hint: 'access_token'
        }
      };
      // Get AccessToken instance from provider
      AccessToken = provider.AccessToken;
      tokenInstance = (await AccessToken.find(token));
      if (!tokenInstance) {
        logger.oauth('Token not found', {
          tokenPrefix: token.substring(0, 10) + '...'
        });
        return res.status(401).json({
          error: 'invalid_token',
          error_description: 'The access token provided is expired, revoked, malformed, or invalid'
        });
      }
      // Check if token is expired
      if (tokenInstance.isExpired) {
        logger.oauth('Token expired', {
          tokenPrefix: token.substring(0, 10) + '...',
          expiresAt: tokenInstance.expiresAt
        });
        return res.status(401).json({
          error: 'invalid_token',
          error_description: 'The access token provided is expired'
        });
      }
      logger.oauth('Authentication successful', {
        tokenPrefix: token.substring(0, 10) + '...',
        clientId: tokenInstance.clientId,
        scope: tokenInstance.scope
      });
      // Add token info to request object
      req.oauth = {
        token: tokenInstance,
        client: {
          id: tokenInstance.clientId
        },
        scope: tokenInstance.scope
      };
      return next();
    } catch (error1) {
      error = error1;
      logger.oauth('Authentication error', {
        error: error.message,
        stack: error.stack,
        method: req.method,
        path: req.path
      });
      // Handle specific error types
      if (error.name === 'InvalidTokenError' || ((ref = error.message) != null ? ref.includes('invalid') : void 0)) {
        return res.status(401).json({
          error: 'invalid_token',
          error_description: 'The access token provided is expired, revoked, malformed, or invalid'
        });
      }
      // Generic authentication error
      return res.status(401).json({
        error: 'invalid_token',
        error_description: 'Authentication failed'
      });
    }
  };

  // Scope verification middleware factory
  requireScope = function(requiredScope) {
    return function(req, res, next) {
      var hasRequiredScope, ref, ref1, requiredScopes, tokenScopes;
      if (!((ref = req.oauth) != null ? ref.token : void 0)) {
        return res.status(401).json({
          error: 'invalid_token',
          error_description: 'No valid token found'
        });
      }
      tokenScopes = req.oauth.scope ? req.oauth.scope.split(' ') : [];
      requiredScopes = requiredScope.split(' ');
      hasRequiredScope = requiredScopes.every(function(scope) {
        return tokenScopes.includes(scope);
      });
      if (!hasRequiredScope) {
        logger.oauth('Insufficient scope', {
          required: requiredScope,
          provided: req.oauth.scope,
          clientId: (ref1 = req.oauth.client) != null ? ref1.id : void 0
        });
        return res.status(403).json({
          error: 'insufficient_scope',
          error_description: `Required scope: ${requiredScope}`
        });
      }
      return next();
    };
  };

  module.exports = authenticate;

  module.exports.requireScope = requireScope;

}).call(this);
